<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: streams.proto

namespace Event_store\Client\Streams;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>event_store.client.streams.ReadResp</code>
 */
class ReadResp extends \Google\Protobuf\Internal\Message
{
    protected $content;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Event_store\Client\Streams\ReadResp\ReadEvent $event
     *     @type \Event_store\Client\Streams\ReadResp\SubscriptionConfirmation $confirmation
     *     @type \Event_store\Client\Streams\ReadResp\Checkpoint $checkpoint
     *     @type \Event_store\Client\Streams\ReadResp\StreamNotFound $stream_not_found
     *     @type int|string $first_stream_position
     *     @type int|string $last_stream_position
     *     @type \Event_store\Client\AllStreamPosition $last_all_stream_position
     *     @type \Event_store\Client\Streams\ReadResp\CaughtUp $caught_up
     *     @type \Event_store\Client\Streams\ReadResp\FellBehind $fell_behind
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Streams::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.ReadEvent event = 1;</code>
     * @return \Event_store\Client\Streams\ReadResp\ReadEvent|null
     */
    public function getEvent()
    {
        return $this->readOneof(1);
    }

    public function hasEvent()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.ReadEvent event = 1;</code>
     * @param \Event_store\Client\Streams\ReadResp\ReadEvent $var
     * @return $this
     */
    public function setEvent($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\ReadEvent::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;</code>
     * @return \Event_store\Client\Streams\ReadResp\SubscriptionConfirmation|null
     */
    public function getConfirmation()
    {
        return $this->readOneof(2);
    }

    public function hasConfirmation()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;</code>
     * @param \Event_store\Client\Streams\ReadResp\SubscriptionConfirmation $var
     * @return $this
     */
    public function setConfirmation($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\SubscriptionConfirmation::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;</code>
     * @return \Event_store\Client\Streams\ReadResp\Checkpoint|null
     */
    public function getCheckpoint()
    {
        return $this->readOneof(3);
    }

    public function hasCheckpoint()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;</code>
     * @param \Event_store\Client\Streams\ReadResp\Checkpoint $var
     * @return $this
     */
    public function setCheckpoint($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\Checkpoint::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;</code>
     * @return \Event_store\Client\Streams\ReadResp\StreamNotFound|null
     */
    public function getStreamNotFound()
    {
        return $this->readOneof(4);
    }

    public function hasStreamNotFound()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;</code>
     * @param \Event_store\Client\Streams\ReadResp\StreamNotFound $var
     * @return $this
     */
    public function setStreamNotFound($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\StreamNotFound::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 first_stream_position = 5;</code>
     * @return int|string
     */
    public function getFirstStreamPosition()
    {
        return $this->readOneof(5);
    }

    public function hasFirstStreamPosition()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>uint64 first_stream_position = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFirstStreamPosition($var)
    {
        GPBUtil::checkUint64($var);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 last_stream_position = 6;</code>
     * @return int|string
     */
    public function getLastStreamPosition()
    {
        return $this->readOneof(6);
    }

    public function hasLastStreamPosition()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>uint64 last_stream_position = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLastStreamPosition($var)
    {
        GPBUtil::checkUint64($var);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.event_store.client.AllStreamPosition last_all_stream_position = 7;</code>
     * @return \Event_store\Client\AllStreamPosition|null
     */
    public function getLastAllStreamPosition()
    {
        return $this->readOneof(7);
    }

    public function hasLastAllStreamPosition()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.AllStreamPosition last_all_stream_position = 7;</code>
     * @param \Event_store\Client\AllStreamPosition $var
     * @return $this
     */
    public function setLastAllStreamPosition($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\AllStreamPosition::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.CaughtUp caught_up = 8;</code>
     * @return \Event_store\Client\Streams\ReadResp\CaughtUp|null
     */
    public function getCaughtUp()
    {
        return $this->readOneof(8);
    }

    public function hasCaughtUp()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.CaughtUp caught_up = 8;</code>
     * @param \Event_store\Client\Streams\ReadResp\CaughtUp $var
     * @return $this
     */
    public function setCaughtUp($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\CaughtUp::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.FellBehind fell_behind = 9;</code>
     * @return \Event_store\Client\Streams\ReadResp\FellBehind|null
     */
    public function getFellBehind()
    {
        return $this->readOneof(9);
    }

    public function hasFellBehind()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.event_store.client.streams.ReadResp.FellBehind fell_behind = 9;</code>
     * @param \Event_store\Client\Streams\ReadResp\FellBehind $var
     * @return $this
     */
    public function setFellBehind($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\FellBehind::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getContent()
    {
        return $this->whichOneof("content");
    }

}

