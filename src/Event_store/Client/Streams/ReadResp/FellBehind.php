<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: streams.proto

namespace Event_store\Client\Streams\ReadResp;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The $all or stream subscription has fallen back into catchup mode and is no longer live.
 *
 * Generated from protobuf message <code>event_store.client.streams.ReadResp.FellBehind</code>
 */
class FellBehind extends \Google\Protobuf\Internal\Message
{
    /**
     * Current time in the server when the subscription fell behind
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    protected $timestamp = null;
    /**
     * Checkpoint for resuming a stream subscription.
     * For stream subscriptions it is populated unless the stream is empty.
     * For $all subscriptions it is not populated.
     *
     * Generated from protobuf field <code>optional int64 stream_revision = 2;</code>
     */
    protected $stream_revision = null;
    /**
     * Checkpoint for resuming a $all subscription.
     * For stream subscriptions it is not populated.
     * For $all subscriptions it is populated unless the database is empty.
     *
     * Generated from protobuf field <code>optional .event_store.client.streams.ReadResp.Position position = 3;</code>
     */
    protected $position = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Timestamp $timestamp
     *           Current time in the server when the subscription fell behind
     *     @type int|string $stream_revision
     *           Checkpoint for resuming a stream subscription.
     *           For stream subscriptions it is populated unless the stream is empty.
     *           For $all subscriptions it is not populated.
     *     @type \Event_store\Client\Streams\ReadResp\Position $position
     *           Checkpoint for resuming a $all subscription.
     *           For stream subscriptions it is not populated.
     *           For $all subscriptions it is populated unless the database is empty.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Streams::initOnce();
        parent::__construct($data);
    }

    /**
     * Current time in the server when the subscription fell behind
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * Current time in the server when the subscription fell behind
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Checkpoint for resuming a stream subscription.
     * For stream subscriptions it is populated unless the stream is empty.
     * For $all subscriptions it is not populated.
     *
     * Generated from protobuf field <code>optional int64 stream_revision = 2;</code>
     * @return int|string
     */
    public function getStreamRevision()
    {
        return isset($this->stream_revision) ? $this->stream_revision : 0;
    }

    public function hasStreamRevision()
    {
        return isset($this->stream_revision);
    }

    public function clearStreamRevision()
    {
        unset($this->stream_revision);
    }

    /**
     * Checkpoint for resuming a stream subscription.
     * For stream subscriptions it is populated unless the stream is empty.
     * For $all subscriptions it is not populated.
     *
     * Generated from protobuf field <code>optional int64 stream_revision = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStreamRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->stream_revision = $var;

        return $this;
    }

    /**
     * Checkpoint for resuming a $all subscription.
     * For stream subscriptions it is not populated.
     * For $all subscriptions it is populated unless the database is empty.
     *
     * Generated from protobuf field <code>optional .event_store.client.streams.ReadResp.Position position = 3;</code>
     * @return \Event_store\Client\Streams\ReadResp\Position|null
     */
    public function getPosition()
    {
        return $this->position;
    }

    public function hasPosition()
    {
        return isset($this->position);
    }

    public function clearPosition()
    {
        unset($this->position);
    }

    /**
     * Checkpoint for resuming a $all subscription.
     * For stream subscriptions it is not populated.
     * For $all subscriptions it is populated unless the database is empty.
     *
     * Generated from protobuf field <code>optional .event_store.client.streams.ReadResp.Position position = 3;</code>
     * @param \Event_store\Client\Streams\ReadResp\Position $var
     * @return $this
     */
    public function setPosition($var)
    {
        GPBUtil::checkMessage($var, \Event_store\Client\Streams\ReadResp\Position::class);
        $this->position = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(FellBehind::class, \Event_store\Client\Streams\ReadResp_FellBehind::class);

