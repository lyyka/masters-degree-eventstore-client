<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: shared.proto

namespace Event_store\Client\UUID;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>event_store.client.UUID.Structured</code>
 */
class Structured extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 most_significant_bits = 1;</code>
     */
    protected $most_significant_bits = 0;
    /**
     * Generated from protobuf field <code>int64 least_significant_bits = 2;</code>
     */
    protected $least_significant_bits = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $most_significant_bits
     *     @type int|string $least_significant_bits
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Shared::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 most_significant_bits = 1;</code>
     * @return int|string
     */
    public function getMostSignificantBits()
    {
        return $this->most_significant_bits;
    }

    /**
     * Generated from protobuf field <code>int64 most_significant_bits = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMostSignificantBits($var)
    {
        GPBUtil::checkInt64($var);
        $this->most_significant_bits = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int64 least_significant_bits = 2;</code>
     * @return int|string
     */
    public function getLeastSignificantBits()
    {
        return $this->least_significant_bits;
    }

    /**
     * Generated from protobuf field <code>int64 least_significant_bits = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLeastSignificantBits($var)
    {
        GPBUtil::checkInt64($var);
        $this->least_significant_bits = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Structured::class, \Event_store\Client\UUID_Structured::class);

